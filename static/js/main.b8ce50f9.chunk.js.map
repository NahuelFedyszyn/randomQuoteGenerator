{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","quoteList","useState","text","setText","author","setAuthor","fadeIn","segs","id","element","document","getElementById","op","style","opacity","interval","setInterval","clearInterval","apiCall","a","url","method","body","headers","fetch","response","json","Promise","reject","getQuotes","quotesResult","quotes","Math","floor","random","length","quote","useEffect","className","Container","Row","Col","target","href","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uSAuGeA,MAhGf,WAAgB,IAOVC,EAPS,EAIWC,mBAAS,QAJpB,mBAINC,EAJM,KAIAC,EAJA,OAKeF,mBAAS,UALxB,mBAKNG,EALM,KAKEC,EALF,KAWf,SAASC,EAAOC,EAAMC,GACpB,IAAIC,EAAUC,SAASC,eAAeH,GAClCI,EAAK,EACTH,EAAQI,MAAMC,QAAUF,EACxB,IAAIG,EAAWC,aACf,WACOJ,EAAG,GACFA,GAAQ,IAERH,EAAQI,MAAMC,QAAUF,GAGxBK,cAAcF,KARcR,GAfvB,SA4BEW,EA5BF,8EA4Bb,uCAAAC,EAAA,6DACEC,EADF,EACEA,IADF,IAEEC,cAFF,MAEW,MAFX,EAGEC,EAHF,EAGEA,KACAC,EAJF,EAIEA,QAJF,kBAO6BC,MAAMJ,EAAI,CACjCC,SAAQC,OAAMC,YARpB,cAOYE,EAPZ,yBAUSA,EAASC,QAVlB,gCAcMC,QAAQC,OAAR,MAdN,0DA5Ba,sBA8Cb,IAAMC,EAAS,uCAAG,4BAAAV,EAAA,sEACWD,EAAQ,CAACE,IAAK,2IADzB,OACVU,EADU,OAEhB9B,EAAa8B,EAAaC,OAC1BzB,EAAO,EAAE,aACTH,EAAQH,EAAUgC,KAAKC,MAAMD,KAAKE,SAASlC,EAAUmC,SAASC,OAC9D/B,EAAUL,EAAUgC,KAAKC,MAAMD,KAAKE,SAASlC,EAAUmC,SAAS/B,QALhD,2CAAH,qDAmBf,OAXAiC,oBAAUR,EAAU,IAYlB,qCACA,qBAAKS,UAAU,UAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,sBAAKjC,GAAG,YAAY8B,UAAU,WAA9B,UACE,oBAAI9B,GAAG,OAAP,SAAeN,IACf,mBAAGM,GAAG,SAAN,SAAgBJ,IAChB,sBAAMkC,UAAU,aAAhB,UACE,mBAAGI,OAAO,SAASC,KAAI,gDAA2CzC,EAAO,QAAUE,GAAUI,GAAG,cAAhG,SAA8G,mBAAG8B,UAAU,oBAC3H,wBAAQM,QApBtB,WACEf,KAmB6CrB,GAAG,YAApC,qCAOZ,mCACE,cAACgC,EAAA,EAAD,UACE,mBAAGF,UAAU,UAAUK,KAAK,+CAA5B,kCAEF,eAACH,EAAA,EAAD,WACE,mBAAGG,KAAK,yDAAyDL,UAAU,eAA3E,SAA0F,mBAAGA,UAAU,qBACvG,mBAAGK,KAAK,oCAAoCL,UAAU,eAAtD,SAAqE,mBAAGA,UAAU,6BCpF3EO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9C,SAASC,eAAe,SAM1BkC,M","file":"static/js/main.b8ce50f9.chunk.js","sourcesContent":["\nimport './App.css';\nimport {Col, Container, Row} from 'react-bootstrap'\nimport {useState, useEffect} from 'react'\nimport { getAllByRole } from '@testing-library/dom';\n\n\nfunction App() {\n\n  \n  \n  const [text, setText] = useState(\"RNDM\");\n  const [author, setAuthor] = useState(\"Author\");\n  //const [quoteList, setQuoteList] = useState([]);\n  let quoteList;\n  \n//Funcion fadeIn\n\nfunction fadeIn(segs, id){\n  let element = document.getElementById(id);\n  let op = 0.0;\n  element.style.opacity = op;\n  let interval = setInterval(aparecer,segs);\n  function aparecer(){\n      if(op<1){\n          op = op+0.01;\n          \n          element.style.opacity = op;\n      }\n      else{\n          clearInterval(interval);\n      }\n  }\n}\n\n  async function apiCall({\n    url,\n    method = \"get\",\n    body,\n    headers\n}){\n    try{\n        const response = await fetch(url,{\n        method, body, headers\n    });\n    return response.json();\n    }\n    \n    catch (err){\n        Promise.reject(err);\n    }\n}\n\n  const getQuotes = async () => {\n    const quotesResult = await apiCall({url: \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"});\n    quoteList = (quotesResult.quotes);\n    fadeIn(5,\"quote-box\")\n    setText(quoteList[Math.floor(Math.random()*quoteList.length)].quote);\n    setAuthor(quoteList[Math.floor(Math.random()*quoteList.length)].author);\n  }\n\n  useEffect(getQuotes,[]);\n\n  function getRandomQuote(){\n    getQuotes();\n  }\n\n \n\n\n\n\n  return (\n    <>\n    <div className=\"mainDiv\">\n      <Container>\n        <Row>\n          <Col>\n            <div id=\"quote-box\" className=\"mainCard\">\n              <h1 id=\"text\">{text}</h1>\n              <p id=\"author\">{author}</p>\n              <div  className=\"cardFooter\">\n                <a target=\"_blank\" href={`https://twitter.com/intent/tweet?text=${text + \" --- \" + author}`} id=\"tweet-quote\"><i className=\"bi bi-twitter\"></i></a>\n                <button onClick={getRandomQuote} id=\"new-quote\">New Quote</button>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n    <footer>\n      <Row>\n        <a className=\"footerA\" href=\"https://nahuelfedyszyn.github.io/nahuelfedy/\">by Nahuel Fedyszyn</a>\n      </Row>\n      <Row>\n        <a href=\"https://www.linkedin.com/in/nahuel-fedyszyn-a95764186/\" className=\"icon footerA\"><i className=\"bi bi-linkedin\"></i></a>\n        <a href=\"https://github.com/NahuelFedyszyn\" className=\"footerA icon\"><i className=\"bi bi-github\"></i></a>\n      </Row>\n    </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}